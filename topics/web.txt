web-server - основна задача -відображення вмісту сайту (через протокол http/https) apache, nginx
application-server - основна задача - логіка, взаємодія між коритувачем і контентом tomcat

nginx
	/usr/share/nginx/html - сайт
	/etc/nginx/nginx.conf - конф

HAProxy
https://www.dmosk.ru/terminus.php?object=haproxy
http://devacademy.ru/posts/haproxy/
	ПЗ призначене для організації відмово-стійкості мережевих сервісів і балансування навантаження
	приймає мережеві запити і направляє їх на інші сервери за сконфігурованими правилами
	Має більш гнучкі можливості по налаштуваннях балансування ніж nginx	

редірект http-https
https://habr.com/post/252507/
https://habr.com/sandbox/92193/
https://www.vis-design.com/ru/blog/perehod-na-https-poshagovaja-instrukcija.htm
	- замінити абсолютні зсилки на відносні (https://site.com/kontakty/ - абсолютна, //site.com/kontakty/  - відносна)
	- встановлюємо ssl-сертифікати
	- перевірити чи працює по 2-х версіях (http/https)
	- 301 redirect - переадресація з http на https
	- настройка сайта для пошукових систем (вказуємо нову директив Host: https://site.com/ в файлі robots.txt )

ssl-сертифікати
https://enterprise.arcgis.com/ru/web-adaptor/10.3/install/iis/enable-https-on-your-web-server-server-.htm
https://ssl.com.ua/faq/how-to-install-ssl-nginx.html
	це файл, який містить інформацію про веб-сервер і метод щифрування. Він створюється власником сайту і повинен мати цифровий підпис
	види сертифікатів:
		- підписані центром сертифікації (якщо використовується доступ ззовні)
		- сертифікати домена - якщо сайт знаходиться за фаєрволом (користувачі поза доменом не зможуть перевірити достовірність сертифіката)
		- самопідписні сертифікати - підписані тільки власником сайта - в основному викор тільки для внутрішнього користування (в межах LAN)
	види сертифікатів (по секюрності):
		- EssentialSSL - базовий, тільки перевірка по домену
		- InstantSSL - середній рівень
		- EV SSL - гарантує максимальну надійність
	настройка для NGINX:
		- з"єднуємо 3 серти в один : cat comodo_root.crt comodo_intermediate.crt vash_domen.crt > bundle.crt
		- дописуємо в конф. файлі підтримку ссл, вказуємо сертифікат (об"єднаний)
		- 301 редірект
		- рестарт nginx

методи балансування
	основні алгоритми розподілення навантаження:
		- roundrobin - (за замовчуванням) - перебирає сервери по черзі
		- leastconn - вибирає сервер з найменшим числом активних з"єднань. Рекомендується для довгих сесій
		- source hash Scheduling - вибирає сервер з статичної таблиці на основі ІР відправника (таким чином користувач звертається весь час до одного сервера)
		- destination hash Scheduling - те саме, але ір отримувача
		- Sticky Sessions - за допомогою хеш-таблиці запити одного клієнта передаються на той самий сервер (якщо сервер недоступний, то передаються наступному)

різниця між http1 i http2
	+
		- http2 - бінарний а не текстовий протокол
		- викор. одне мультиплекс. з"єднання замість багатьох, які передають по одному файлу
		- використовується стиснення заголовків протоколом HPACK
		- використовується алгоритм пріорітизації щоб віддавати браузерам в першу чергу найнеобхідніші файли
		- вища швидкість
	-
		- вищі затрати для з"єднання (HPACK вимагає пітримки таблиці перетворення на обох кінцях), треба білше пам"яті для з"єднання
		- додаткова робота по пошуку і видаленню HTTP1 оптимізацій, щоб пришвидшити роботу 
		- не дає переваги при завантаженні великих файлів

SSL vs TLS
https://codeguida.com/post/866
	TLS(Transport Layer Security) - наступник SSL(Secure Sockets Layer)
	при використанні сертифікатів дані, якими обмінюється клієнт з сервером шифруються
	види сертифікатів 
		DV - Domain Validation
		OV - Organization Validation (видається юридичним особам)
		EV - Extended Validation (найбільш дорогий і секюрний)
	для генерації спільного секретного ключа використовується асиметричне шифрування
	при https використовується симетричне шифрування даних

squid-proxy
	Squid — это кэширующий прокси-сервер для web, который поддерживает такие протоколы как: HTTP, HTTPS, FTP, GOPHER и многие другие. Прокси-сервер имеет расширенные функции контроля доступа, качества обслуживания QoS и может создавать «ускоритель» для HTTP-серверов (Reverse Proxy).
	можна використовувати маскарадінг для збільшення швидкості

реверс-проксі
	ретранслює запити клієнтів з зовнішньої мережі на один або декілька клієнтів, логічно розміщених в внутрішній мережі. На відміну від прозорого проксі, який перенаправляє запити від внутрішніх клєнтів до любих серверів в інтернеті і повертає результат, реверс проксі безпосередньо взаємодіє тільки з асоційованими з ним серверами і повертає відповідь тільки від них.