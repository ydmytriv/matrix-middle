scrum (з регбі - схватка за м"яч) - методологія розробки продукта, яка базується на принципах тайм-менеджемнту і передбачає включення всіх учасників (власник продукта, команда)
	власник продукта
	scrum-master 
	scrum команда
	час розробки ділиться на спринти - 1-4 тижні (фіксований розмір) перед спринтом - sprint-planning (оцінка product-backlog і формування спринт-беклог і встановлюється ціль на спринт)
	кожен день проходять daily scrum - кожен член команди розказує що робив вчора і що планує робити сьогодні
	в кінці спринта роводять Sprint Review і Sprint Retrospective - оцінка ефективності команди, прогноз наступної ефективності
	розмір команди 7 +- 2 чол
	беклог - список робіт
		product-backlog - список робіт для отримання кінцеваого продукта
		реліз-беклог
		спринт-беклог - список робіт на спринт
	викор. для стартапів, невеликих команд, коли ТЗ може змінюватись або недостатньо точно викладене
	плюси:
		- швидший старт (порівяно з водопадом)
		- гнучкість і адаптивність
		- можливість внесення змін в план
		- простота вивчення
		- рання доставка продукту (після кожного спринта)
	мінуси:
		- немає плану реагування на ризики
		- недостатньо документації, важко передати іншій команді

kanban - agile фреймворк (тут існують беклоги), дуже добре працює з командами підтримки (де важлива швидкість раекції на зміни) ще гнучкіший ніж scrum і хр
	зменшення роботи, яка виконується в даний час "work in progress"
	різниця між скрам і канбан:
		- немає таймбоксів на задачі і спрінти
		- розмір задач більший
		- необов"язкові оцінки строків на задачу
		- орієнтація на задачі
	менеджер створює і оновлює, міняє пріорітет в пулі задач, команда виконує задачі (канбан-дошка)
	стовпці дошки:
		- цілі проекту
		- черга задач
		- дизайн
		- розробка
		- тестування
		- деплоймент
		- закінчення
	правила канбан:
		- візуалізуй виробництво
		- обмежуй wip на кжному етапі
		- оптимізуй процес щоб зменшити час виконання задачі
	менше часу тратиться на планування і організацію процесів (ретроспектива і тд, в порівнянні з скрамом)
		https://habrahabr.ru/post/64997/

waterfall (каскадна)- послідовне проходження стадій (перехід тільки після повного виконання)
	- проектування
	- дизайн
	- кодування
	- тестування
	- підтримка
	викор. коли повністю відомі тех. вимоги, все зафіксовано і задокументовано
	плюси:
		- прозорість процесу
		- легко керувати
		- фіксована вартість
	мінуси:
		- неможливо зробити крок назад
		- висока вартість внесення змін (і довго чекати)
		- нема гнучкості

ХР (екстремальне програмування) 
	- гра в планування (замовник визначає задачі, кожен розробник сам визначає яку задачу він хотів би робити і скільки йому потрібно на то часу)
	- план релізів (визначає ати релізів і формулуювання користувачів для кожного релізу, план може бути переглянутий в разі відставання або випередження 
		після певної ітерації. На кожну ітерацію планується певний функціонал)
	- планування ітерацій (1-3 тижні)(на початку кожної ітерації виробляєтьс план для вирішення певних задач, вирішення задач повинно бути 1-3 дні, отже групуємо або 	ділимо, в першу чергу виконуються найважливіші задачі)
	- стендапи - кожного ранку
	- код повинен бути як можна простішим
	- спільна система імен для об"єктів
	- розуміння вимог замовника, залучення замовника, його представника або іншого спеціаліста в цій галузі до процесу, пишуться User story - замовник пише своє розуміння роботи системи
	- тестування до початку розробки (визначити поведінку функціх, до початку її написання)
	- парне програмування (один пише, інший дивиться потім міняються)
	- зміна позицій (між ітераціями щоб запобігти вузьким знанням)
	- колективне володіння кодом (будь-хто може вносити зміни)
	- однаковий стильнаписання коду
	- часта інтеграція
	- 40-годинний робочий тиждень